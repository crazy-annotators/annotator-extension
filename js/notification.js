// Generated by CoffeeScript 1.10.0
var Notification, notificationDebug, uniqueId;

uniqueId = function(length) {
  var id;
  if (length == null) {
    length = 8;
  }
  id = "";
  while (id.length < length) {
    id += Math.random().toString(36).substr(2);
  }
  return id.substr(0, length);
};

notificationDebug = false;


/*
    Example Usage:

    notification = new Notification
        title: 'Deneme',
        msg: 'Sadece bir message...',
        icon: 'img/a128.png',
        buttonListener: (notificationId, index) ->
            console.log index
            console.log notificationId

    notification.setButton 'Yes'
    notification.setButton 'No'

    notification.clearAfter 3

    notification.show()
 */

Notification = (function() {
  function Notification(options) {
    this.id = options.id, this.title = options.title, this.msg = options.msg, this.type = options.type, this.icon = options.icon, this.buttonListener = options.buttonListener;
    if (this.id == null) {
      this.id = uniqueId();
    }
    if (this.type == null) {
      this.type = 'basic';
    }
    if (this.icon == null) {
      this.icon = '';
    }
    this.buttons = [];
    this.callbacks = [];
    if (notificationDebug) {
      console.log('Initialized new Notification class', this.id);
    }
    if (notificationDebug) {
      console.log(this);
    }
  }

  Notification.prototype.setButton = function(title, callback) {
    if (callback == null) {
      callback = null;
    }
    if (this.buttons.length > 2) {
      throw 'You can add three buttons maximum.';
    }
    this.buttons.push({
      title: title
    });
    if (notificationDebug) {
      return console.log('Added new button', title, this.id);
    }
  };

  Notification.prototype.setCallback = function(callback1) {
    this.callback = callback1;
    this.callbacks.push(callback);
    if (notificationDebug) {
      return console.log('Set new callback', this.id);
    }
  };

  Notification.prototype.clearAfter = function(clearSeconds, clearCallback) {
    this.clearSeconds = clearSeconds != null ? clearSeconds : 0;
    this.clearCallback = clearCallback;
    this.clearCallback = function(wasCleared) {
      if (this.clearCallback != null) {
        return console.log(wasCleared);
      }
    };
    if (notificationDebug && this.clearSeconds > 0) {
      return console.log('Notification will closed after', this.seconds, '#', this.id);
    }
  };

  Notification.prototype.show = function() {
    return chrome.notifications.create('notify', {
      type: this.type,
      title: this.title,
      message: this.msg,
      buttons: this.buttons || {},
      iconUrl: chrome.extension.getURL(this.icon)
    }, (function(_this) {
      return function(notificationId) {
        var callback, i, len, ref;
        ref = _this.callbacks;
        for (i = 0, len = ref.length; i < len; i++) {
          callback = ref[i];
          callback.call(null, notificationId);
        }
        if (_this.clearSeconds) {
          setTimeout(chrome.notifications.clear, _this.clearSeconds * 1000, notificationId, _this.clearCallback);
        }
        if (_this.buttonListener != null) {
          chrome.notifications.onButtonClicked.addListener(_this.buttonListener);
        }
        if (notificationDebug) {
          return console.log('Called callback', callback);
        }
      };
    })(this));
  };

  return Notification;

})();
